# Use this for points: https://automeris.io/

import numpy as np
import matplotlib.pyplot as plt

# === 1. Load data ===
raw_data = """
6.094276094276095, 7.65625
6.073232323232324, 7.800925925925926
6.073232323232324, 7.916666666666666
6.073232323232324, 8.032407407407408
6.073232323232324, 8.177083333333334
6.094276094276095, 8.32175925925926
6.115319865319867, 8.466435185185185
6.178451178451179, 8.466435185185185
6.241582491582492, 8.37962962962963
6.283670033670035, 8.32175925925926
6.388888888888889, 8.234953703703704
6.452020202020203, 8.148148148148147
6.515151515151516, 8.061342592592592
6.62037037037037, 8.061342592592592
6.683501683501685, 8.061342592592592
6.7466329966329965, 8.090277777777779
6.830808080808081, 8.090277777777779
6.914983164983166, 8.061342592592592
6.936026936026936, 8.206018518518517
7.020202020202021, 8.350694444444445
7.083333333333334, 8.4375
7.125420875420875, 8.49537037037037
7.188552188552189, 8.582175925925926
7.2516835016835035, 8.49537037037037
7.272727272727273, 8.4375
7.272727272727273, 8.37962962962963
7.293771043771045, 8.292824074074074
7.293771043771045, 8.177083333333334
7.293771043771045, 8.032407407407408
7.314814814814815, 7.916666666666666
7.293771043771045, 7.829861111111111
7.314814814814815, 7.71412037037037
7.293771043771045, 7.5405092592592595
7.314814814814815, 7.453703703703704
7.314814814814815, 7.309027777777779
7.314814814814815, 7.222222222222221
7.293771043771045, 7.106481481481481
7.293771043771045, 6.9907407407407405
7.293771043771045, 6.875
7.3358585858585865, 6.7592592592592595
7.3989898989899, 6.672453703703704
7.441077441077443, 6.585648148148147
7.4831649831649845, 6.440972222222221
7.546296296296298, 6.354166666666666
7.609427609427611, 6.238425925925926
7.693602693602694, 6.180555555555555
7.735690235690237, 6.122685185185185
7.79882154882155, 6.006944444444443
7.840909090909092, 5.949074074074074
7.904040404040405, 5.833333333333334
7.98821548821549, 5.746527777777777
8.009259259259261, 5.630787037037036
8.072390572390573, 5.486111111111111
8.114478114478116, 5.3703703703703685
8.156565656565657, 5.25462962962963
8.177609427609429, 5.109953703703702
8.177609427609429, 5.023148148148149
8.177609427609429, 4.965277777777777
8.135521885521886, 4.878472222222223
8.135521885521886, 4.733796296296298
8.177609427609429, 4.675925925925926
8.240740740740742, 4.560185185185185
8.303872053872055, 4.444444444444443
8.324915824915825, 4.328703703703702
8.324915824915825, 4.270833333333332
8.324915824915825, 4.1261574074074066
8.303872053872055, 4.068287037037036
8.303872053872055, 3.9525462962962976
8.282828282828284, 3.8368055555555554
8.240740740740742, 3.721064814814815
8.324915824915825, 3.6053240740740744
8.451178451178452, 3.5763888888888893
8.514309764309765, 3.5474537037037024
8.59848484848485, 3.5185185185185173
8.745791245791247, 3.5474537037037024
8.851010101010102, 3.5474537037037024
8.956228956228959, 3.5474537037037024
9.082491582491583, 3.5474537037037024
9.166666666666668, 3.5185185185185173
9.313973063973066, 3.5185185185185173
9.39814814814815, 3.4317129629629637
9.461279461279462, 3.3449074074074066
9.440235690235692, 3.1712962962962976
9.377104377104377, 3.0844907407407405
9.292929292929294, 3.0266203703703685
9.166666666666668, 2.96875
9.061447811447813, 2.939814814814815
8.935185185185187, 2.939814814814815
8.872053872053874, 2.9108796296296298
8.808922558922559, 2.881944444444443
8.745791245791247, 2.8530092592592577
8.682659932659934, 2.9108796296296298
8.745791245791247, 2.9976851851851833
8.808922558922559, 3.0555555555555554
8.872053872053874, 3.0844907407407405
8.914141414141415, 3.142361111111109
8.872053872053874, 3.1712962962962976
8.808922558922559, 3.1712962962962976
8.745791245791247, 3.1712962962962976
8.682659932659934, 3.200231481481481
8.57744107744108, 3.1712962962962976
8.493265993265995, 3.1712962962962976
8.367003367003369, 3.1712962962962976
8.261784511784512, 3.1712962962962976
8.177609427609429, 3.1712962962962976
8.114478114478116, 3.142361111111109
8.051346801346803, 3.142361111111109
7.967171717171718, 3.142361111111109
7.9250841750841765, 3.142361111111109
7.882996632996633, 3.1134259259259256
7.819865319865322, 3.0555555555555554
7.756734006734007, 3.0266203703703685
7.693602693602694, 3.0266203703703685
7.630471380471382, 2.9976851851851833
7.588383838383839, 2.9976851851851833
7.525252525252526, 2.9976851851851833
7.546296296296298, 3.0555555555555554
7.5673400673400675, 3.1134259259259256
7.588383838383839, 3.1712962962962976
7.630471380471382, 3.229166666666666
7.672558922558924, 3.2870370370370345
7.735690235690237, 3.315972222222223
7.714646464646465, 3.3738425925925917
7.651515151515152, 3.402777777777777
7.609427609427611, 3.4317129629629637
7.525252525252526, 3.489583333333332
7.504208754208754, 3.5763888888888893
7.504208754208754, 3.663194444444443
7.4831649831649845, 3.75
7.3989898989899, 3.7789351851851833
7.377946127946128, 3.721064814814815
7.3358585858585865, 3.6053240740740744
7.314814814814815, 3.5185185185185173
7.272727272727273, 3.3738425925925917
7.230639730639732, 3.229166666666666
7.20959595959596, 3.0844907407407405
7.146464646464649, 3.0266203703703685
7.062289562289564, 3.0266203703703685
6.957070707070709, 3.0266203703703685
6.957070707070709, 3.1134259259259256
6.957070707070709, 3.200231481481481
6.8939393939393945, 3.258101851851851
6.830808080808081, 3.258101851851851
6.78872053872054, 3.142361111111109
6.78872053872054, 3.0555555555555554
6.725589225589227, 2.9976851851851833
6.683501683501685, 2.96875
6.62037037037037, 2.9976851851851833
6.536195286195286, 2.96875
6.473063973063974, 2.9976851851851833
6.494107744107746, 3.0555555555555554
6.515151515151516, 3.142361111111109
6.557239057239057, 3.229166666666666
6.62037037037037, 3.2870370370370345
6.62037037037037, 3.3738425925925917
6.62037037037037, 3.5474537037037024
6.62037037037037, 3.663194444444443
6.62037037037037, 3.8368055555555554
6.62037037037037, 4.010416666666666
6.62037037037037, 4.184027777777777
6.5782828282828305, 4.328703703703702
6.5782828282828305, 4.47337962962963
6.536195286195286, 4.6469907407407405
6.473063973063974, 4.791666666666666
6.430976430976432, 4.9074074074074066
6.3678451178451185, 5.023148148148149
6.304713804713806, 5.138888888888889
6.283670033670035, 5.283564814814815
6.241582491582492, 5.4282407407407405
6.2205387205387215, 5.572916666666666
6.19949494949495, 5.775462962962964
6.157407407407408, 5.949074074074074
6.178451178451179, 6.09375
6.19949494949495, 6.267361111111111
6.178451178451179, 6.383101851851851
6.2205387205387215, 6.527777777777779
6.2205387205387215, 6.7013888888888875
6.19949494949495, 6.875
6.157407407407408, 7.019675925925926
6.115319865319867, 7.164351851851851
6.115319865319867, 7.309027777777779
6.115319865319867, 7.395833333333334
6.115319865319867, 7.511574074074074
7.441077441077443, 3.8368055555555554


"""

# === 2. Parse data ===
points = np.array([[float(x) for x in line.split(',')] for line in raw_data.strip().split('\n')])
x_vals, y_vals = points[:, 0], points[:, 1]
N = len(x_vals)
t_uniform = np.linspace(0, 1, N, endpoint=False)

# === 3. Fourier coefficient generator ===
def get_fourier_coeffs(f, num_terms=10):
    f_fft = np.fft.fft(f) / N
    a0 = f_fft[0].real
    an = 2 * f_fft[1:num_terms + 1].real
    bn = -2 * f_fft[1:num_terms + 1].imag
    return a0, an, bn

# === 4. Reconstruct function from coefficients ===
def reconstruct_fourier(a0, an, bn, t):
    f = np.full_like(t, a0)
    for n in range(1, len(an) + 1):
        f += an[n - 1] * np.cos(2 * 3.14159 * n * t) + bn[n - 1] * np.sin(2 * 3.14159 * n * t)
    return f

# === 5. Compute Fourier coefficients ===
num_terms = 20  # You can adjust this
x0, ax, bx = get_fourier_coeffs(x_vals, num_terms)
y0, ay, by = get_fourier_coeffs(y_vals, num_terms)

# === 6. Format Desmos output with 3.14159 instead of pi ===
def format_fourier(label, a0, an, bn):
    terms = [f"{a0:.5f}"]
    for n, (a, b) in enumerate(zip(an, bn), start=1):
        if abs(a) > 1e-8:
            terms.append(f"{a:.5f}*cos({2*n*3.14159:.5f}*t)")
        if abs(b) > 1e-8:
            terms.append(f"{b:.5f}*sin({2*n*3.14159:.5f}*t)")
    return f"{label}(t) = " + " + ".join(terms)

print("\nðŸ“Œ COPY AND PASTE INTO DESMOS:")
print(format_fourier("x", x0, ax, bx))
print(format_fourier("y", y0, ay, by))
print("\nâœ… Then plot (x(t), y(t)) and set t = 0...1")

# === 7. Plot the reconstructed curve ===
t_plot = np.linspace(0, 1, 1000)
x_recon = reconstruct_fourier(x0, ax, bx, t_plot)
y_recon = reconstruct_fourier(y0, ay, by, t_plot)

plt.figure(figsize=(8, 6))
plt.plot(x_vals, y_vals, 'o', label='Original Points', markersize=3)
plt.plot(x_recon, y_recon, '-', label='Fourier Approximation', linewidth=2)
plt.title('Fourier Series Approximation of Curve')
plt.legend()
plt.grid(True)
plt.axis('equal')
plt.show()





